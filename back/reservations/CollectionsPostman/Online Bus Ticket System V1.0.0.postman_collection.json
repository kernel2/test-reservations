{
	"info": {
		"_postman_id": "2f15fb69-61f9-4bb3-9cee-3706b55ad834",
		"name": "Online Bus Ticket System V1.0.0",
		"description": "Postman collection for the Reservation system controllers",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9164201"
	},
	"item": [
		{
			"name": "BusController",
			"item": [
				{
					"name": "Create Bus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test de succès",
									"pm.test('Status code is 201 - Bus created', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test('Bus has busNumber property', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('busNumber');",
									"});",
									"",
									"// Test de duplication",
									"pm.test('Bus already exists returns 409', function () {",
									"    if (pm.response.code === 409) {",
									"        pm.expect(pm.response.text()).to.include('Bus with number');",
									"    }",
									"});",
									"",
									"// Test d'erreur si un champ manque",
									"pm.test('Bad request returns 400', function () {",
									"    if (pm.response.code === 400) {",
									"        pm.expect(pm.response.text()).to.include('Validation error');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"busNumber\": \"BUS003\",\n    \"seatsPerTrip\": 10,\n    \"departureTime\": \"2024-09-11T08:30:00\",\n    \"pricePerTrip\": 30.00\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/buses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"buses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bus By Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test succès",
									"pm.test('Status code is 200 - Bus found', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Bus has busNumber property', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('busNumber', 'BUS001');",
									"});",
									"",
									"// Test d'erreur 404",
									"pm.test('Bus not found returns 404', function () {",
									"    if (pm.response.code === 404) {",
									"        pm.expect(pm.response.text()).to.include('Bus not found');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/buses/BUS101",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"buses",
								"BUS101"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Buses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test succès",
									"pm.test('Status code is 200 - List buses', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Response should be an array of buses', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"// Test d'aucun bus disponible",
									"pm.test('No buses returns empty array', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(jsonData.length);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/buses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"buses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Trips By Bus And Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains trips\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"All trips match the requested bus number\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(function(trip) {",
									"        pm.expect(trip.busNumber).to.eql(\"BUS123\");",
									"    });",
									"});",
									"",
									"pm.test(\"All trips have the correct date\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(function(trip) {",
									"        pm.expect(trip.dateOfTravel).to.include(\"2024-09-21\");",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/buses/BUS123/trips?date=2024-09-21",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"buses",
								"BUS123",
								"trips"
							],
							"query": [
								{
									"key": "date",
									"value": "2024-09-21"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ClientController",
			"item": [
				{
					"name": "Create Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test de succès",
									"pm.test('Status code is 201 - Client created', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test('Client has email property', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"});",
									"",
									"// Test d'erreur - email déjà utilisé",
									"pm.test('Client already exists returns 409', function () {",
									"    if (pm.response.code === 409) {",
									"        pm.expect(pm.response.text()).to.include('Client already exists');",
									"    }",
									"});",
									"",
									"// Test d'erreur si les champs sont manquants",
									"pm.test('Missing fields returns 400', function () {",
									"    if (pm.response.code === 400) {",
									"        pm.expect(pm.response.text()).to.include('Validation error');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Zakaria FAHRAOUI\",\n    \"email\": \"zakaria.fahraoui@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/clients",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Client By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test succès",
									"pm.test('Status code is 200 - Client found', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Client has name and email properties', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});",
									"",
									"// Test d'erreur - client introuvable",
									"pm.test('Client not found returns 404', function () {",
									"    if (pm.response.code === 404) {",
									"        pm.expect(pm.response.text()).to.include('Client not found');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/clients/6",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clients",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test succès",
									"pm.test('Status code is 200 - List clients', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Response should be an array of clients', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/clients",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ReservationController",
			"item": [
				{
					"name": "Create Reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test succès",
									"pm.test('Status code is 201 - Reservation created', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test('Reservation has clientId and trips', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('clientId');",
									"    pm.expect(jsonData.trips).to.be.an('array');",
									"});",
									"",
									"// Test d'erreur - client introuvable",
									"pm.test('Client not found returns 404', function () {",
									"    if (pm.response.code === 404) {",
									"        pm.expect(pm.response.text()).to.include('Client not found');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientId\": 1,\n    \"trips\": [\n        {\n            \"busNumber\": \"BUS123\",\n            \"dateOfTravel\": \"2024-09-11T08:30:00\"\n        },\n        {\n            \"busNumber\": \"BUS101\",\n            \"dateOfTravel\": \"2024-09-15T16:00:00\"\n        },\n         {\n            \"busNumber\": \"BUS123\",\n            \"dateOfTravel\": \"2024-10-11T20:15:11\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/reservations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reservations"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT List trips in Reservations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test succès - la réservation a été mise à jour avec succès",
									"pm.test('Status code is 200 - Reservation updated', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Reservation has clientId and trips', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('clientId');",
									"    pm.expect(jsonData.trips).to.be.an('array');",
									"    pm.expect(jsonData.trips.length).to.be.above(0);",
									"});",
									"",
									"// Test que chaque trip a les propriétés correctes",
									"pm.test('Each trip has required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.trips.forEach(function (trip) {",
									"        pm.expect(trip).to.have.property('busNumber');",
									"        pm.expect(trip).to.have.property('dateOfTravel');",
									"        pm.expect(trip).to.have.property('seatsPerTrip');",
									"        pm.expect(trip).to.have.property('price');",
									"    });",
									"});",
									"",
									"// Test d'erreur - Client introuvable",
									"pm.test('Client not found returns 404', function () {",
									"    if (pm.response.code === 404) {",
									"        pm.expect(pm.response.text()).to.include('Client not found');",
									"    }",
									"});",
									"",
									"// Test d'erreur - Réservation introuvable",
									"pm.test('Reservation not found returns 404', function () {",
									"    if (pm.response.code === 404) {",
									"        pm.expect(pm.response.text()).to.include('Reservation not found');",
									"    }",
									"});",
									"",
									"// Test d'erreur - Erreur de validation (ex : champs manquants ou invalides)",
									"pm.test('Validation error returns 400', function () {",
									"    if (pm.response.code === 400) {",
									"        pm.expect(pm.response.text()).to.include('Validation failed');",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientId\": 1,\n    \"trips\": [\n        {\n            \"busNumber\": \"BUS123\",\n            \"dateOfTravel\": \"2024-09-21T08:30:00\",\n            \"seatsPerTrip\": 40,\n            \"price\": 50.00\n        },\n        {\n            \"busNumber\": \"BUS456\",\n            \"dateOfTravel\": \"2024-09-16T14:00:00\",\n            \"seatsPerTrip\": 30,\n            \"price\": 75.00\n        },\n        {\n            \"busNumber\": \"BUS789\",\n            \"dateOfTravel\": \"2024-09-17T10:00:00\",\n            \"seatsPerTrip\": 50,\n            \"price\": 80.00\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/reservations/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reservations",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Reservation By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test de succès",
									"pm.test('Status code is 200 - Reservation found', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Reservation has correct properties', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('clientId');",
									"    pm.expect(jsonData.trips).to.be.an('array');",
									"});",
									"",
									"// Test d'erreur - reservation introuvable",
									"pm.test('Reservation not found returns 404', function () {",
									"    if (pm.response.code === 404) {",
									"        pm.expect(pm.response.text()).to.include('Reservation not found');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/reservations/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reservations",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Reservations By Client ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test de succès",
									"pm.test('Status code is 200 - Reservations found', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Reservations should be an array', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"// Test d'erreur - client introuvable",
									"pm.test('Client not found returns 404', function () {",
									"    if (pm.response.code === 404) {",
									"        pm.expect(pm.response.text()).to.include('Client not found');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/reservations/client/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reservations",
								"client",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test succès",
									"pm.test('Status code is 204 - Reservation deleted', function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Test d'erreur - reservation introuvable",
									"pm.test('Reservation not found returns 404', function () {",
									"    if (pm.response.code === 404) {",
									"        pm.expect(pm.response.text()).to.include('Reservation not found');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/reservations/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reservations",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel Reservation",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/reservations/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reservations",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pay Reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test succès",
									"pm.test('Status code is 200 - Payment successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test d'erreur - réservation introuvable",
									"pm.test('Reservation not found returns 404', function () {",
									"    if (pm.response.code === 404) {",
									"        pm.expect(pm.response.text()).to.include('Reservation not found');",
									"    }",
									"});",
									"",
									"// Test d'erreur - paiement déjà effectué",
									"pm.test('Payment already processed returns 409', function () {",
									"    if (pm.response.code === 409) {",
									"        pm.expect(pm.response.text()).to.include('Payment already processed');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/reservations/5/pay/Credit Card",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reservations",
								"5",
								"pay",
								"Credit Card"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BillingController",
			"item": [
				{
					"name": "Get All Bills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test succès",
									"pm.test('Status code is 200 - Bills retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Response should be an array of bills', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/bills",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"bills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bills Sorted By Amount",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/bills/sorted",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"bills",
								"sorted"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pay Reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test succès",
									"pm.test('Status code is 200 - Payment successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test d'erreur - réservation introuvable",
									"pm.test('Reservation not found returns 404', function () {",
									"    if (pm.response.code === 404) {",
									"        pm.expect(pm.response.text()).to.include('Reservation not found');",
									"    }",
									"});",
									"",
									"// Test d'erreur - paiement déjà effectué",
									"pm.test('Payment already processed returns 409', function () {",
									"    if (pm.response.code === 409) {",
									"        pm.expect(pm.response.text()).to.include('Payment already processed');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/reservations/5/pay/Credit Card",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reservations",
								"5",
								"pay",
								"Credit Card"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}